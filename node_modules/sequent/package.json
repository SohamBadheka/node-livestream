{
  "_args": [
    [
      {
        "name": "sequent",
        "raw": "sequent@>= 0.1.2",
        "rawSpec": ">= 0.1.2",
        "scope": null,
        "spec": ">=0.1.2",
        "type": "range"
      },
      "/Users/soham/Desktop/node-rtsp-rtmp-server"
    ]
  ],
  "_from": "sequent@>=0.1.2",
  "_id": "sequent@0.1.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/sequent",
  "_npmUser": {
    "email": "iizuka@kyu-mu.net",
    "name": "iizukanao"
  },
  "_npmVersion": "1.2.23",
  "_phantomChildren": {},
  "_requested": {
    "name": "sequent",
    "raw": "sequent@>= 0.1.2",
    "rawSpec": ">= 0.1.2",
    "scope": null,
    "spec": ">=0.1.2",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/sequent/-/sequent-0.1.2.tgz",
  "_shasum": "f2f61b19c93cbb5735e3821c98c15fb7f1ceb6be",
  "_shrinkwrap": null,
  "_spec": "sequent@>= 0.1.2",
  "_where": "/Users/soham/Desktop/node-rtsp-rtmp-server",
  "author": {
    "email": "iizuka@kyu-mu.net",
    "name": "Nao Iizuka"
  },
  "bugs": {
    "url": "https://github.com/iizukanao/sequent/issues"
  },
  "dependencies": {},
  "description": "JavaScript async flow control",
  "devDependencies": {
    "vows": ">= 0.5.9"
  },
  "directories": {},
  "dist": {
    "shasum": "f2f61b19c93cbb5735e3821c98c15fb7f1ceb6be",
    "tarball": "https://registry.npmjs.org/sequent/-/sequent-0.1.2.tgz"
  },
  "homepage": "https://github.com/iizukanao/sequent",
  "keywords": [
    "sequent",
    "sequence",
    "flow",
    "control",
    "queue",
    "join",
    "wait"
  ],
  "main": "./lib/sequent",
  "maintainers": [
    {
      "email": "iizuka@kyu-mu.net",
      "name": "iizukanao"
    }
  ],
  "name": "sequent",
  "optionalDependencies": {},
  "readme": "sequent\n=======\n\nJavaScript async flow control\n\nHow to use\n----------\n\n### Wait (Join) ###\n\nExecute after expected number of seq.done() are executed.\n\n    var Sequent = require('sequent');\n    var seq = new Sequent;\n\n    setTimeout(function(){\n        seq.done(\"done 1\"); // Arguments are optional\n    }, 500);\n\n    setTimeout(function(){\n        seq.done(\"done 2\", \"end\");\n    }, 1000);\n\n    // Wait for two seq.done()\n    seq.wait(2, function(arg1, arg2){\n        // arg1 == \"done 2\", arg2 == \"end\"\n        console.log(\"all done\");\n    });\n\n### Break (as in `for` loops) ###\n\nExit waiting earlier than planned.\n\n    var Sequent = require('sequent');\n    var seq = new Sequent;\n\n    seq.wait(100, function(arg){\n        // arg == \"matured\"\n    });\n\n    for (var i=0; i<100; i++) {\n        if (i == 5) {\n            // Break here and go to callback of wait()\n            seq.mature(\"matured\");\n        }\n\n        // seq.done() after seq.mature() are ignored\n        seq.done(\"done \" + i);\n    }\n\n### Queue (execute in order) ###\n\nExecute functions in queued order when it becomes available.\n\n    var Sequent = require('sequent');\n    var seq = new Sequent;\n\n    var funcs = [];\n    var results = [];\n    for (var i=1; i<=10; i++) {\n        // Functions will be executed in seq.queue()'d order.\n        // seq.queue() returns a wrapped function.\n        funcs.push(seq.queue(\n            (function(_i){\n                return function(){\n                    results.push(_i);\n                }\n            })(i)\n        ));\n    }\n\n    funcs.reverse();\n\n    // Mark queued functions as available\n    for (var i=0, l=funcs.length; i<l; i++) {\n        funcs[i]();\n    }\n\n    // Wait for all queued functions to be executed\n    seq.flush(function(){\n        // results is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    });\n\nInstallation\n------------\n\n    npm install sequent\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/iizukanao/sequent.git"
  },
  "version": "0.1.2"
}
